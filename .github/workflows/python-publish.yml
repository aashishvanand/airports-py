# This workflow will test, build, and publish a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Build, Test & Publish Python Package

on:
  push:
    branches:
      - release
  release:
    types: [published]
  pull_request:
    branches: [ main, release ]

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=airports --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish to PyPI
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    needs: [test, build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/airports-py
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  publish-to-testpypi:
    name: Publish to TestPyPI
    if: github.event_name == 'pull_request'
    needs: [test, build]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/airports-py
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  github-release:
    name: Create GitHub Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    needs: [test, build, publish-to-pypi]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Extract version from setup.py
      id: get_version
      run: |
        VERSION=$(python setup.py --version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation - you might want to use a more sophisticated tool
        echo "## What's Changed" > TEMP_CHANGELOG.md
        echo "" >> TEMP_CHANGELOG.md
        echo "### ðŸ†• New Features" >> TEMP_CHANGELOG.md
        echo "- Enhanced airport data library with comprehensive search capabilities" >> TEMP_CHANGELOG.md
        echo "- Geographic proximity search with customizable radius" >> TEMP_CHANGELOG.md
        echo "- Distance calculation between airports using great-circle formula" >> TEMP_CHANGELOG.md
        echo "- Search airports by name with case-insensitive matching" >> TEMP_CHANGELOG.md
        echo "- Advanced multi-criteria filtering system" >> TEMP_CHANGELOG.md
        echo "- Autocomplete suggestions for search interfaces" >> TEMP_CHANGELOG.md
        echo "- Timezone-based airport lookup" >> TEMP_CHANGELOG.md
        echo "- External links integration (Wikipedia, FlightRadar24, Radarbox, FlightAware)" >> TEMP_CHANGELOG.md
        echo "" >> TEMP_CHANGELOG.md
        echo "### ðŸ”„ Improvements" >> TEMP_CHANGELOG.md
        echo "- Better error handling with specific error messages" >> TEMP_CHANGELOG.md
        echo "- Enhanced input validation with regex patterns" >> TEMP_CHANGELOG.md
        echo "- Comprehensive test coverage for all functions" >> TEMP_CHANGELOG.md
        echo "- Fixed missing airports.gz file in package distribution" >> TEMP_CHANGELOG.md
        echo "" >> TEMP_CHANGELOG.md
        echo "### ðŸ“‹ Technical Details" >> TEMP_CHANGELOG.md
        echo "- Python 3.6+ compatibility" >> TEMP_CHANGELOG.md
        echo "- Zero external dependencies" >> TEMP_CHANGELOG.md
        echo "- Efficient gzipped data storage" >> TEMP_CHANGELOG.md
        echo "- Type hints and comprehensive documentation" >> TEMP_CHANGELOG.md
        
        # Set output for use in release
        echo "changelog_file=TEMP_CHANGELOG.md" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Release ${{ steps.get_version.outputs.version }}
        body_path: ${{ steps.changelog.outputs.changelog_file }}
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-release-branch:
    name: Update release branch
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Merge release to main
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout main
        git merge origin/release
        git push origin main